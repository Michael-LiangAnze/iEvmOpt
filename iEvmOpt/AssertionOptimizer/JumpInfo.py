class JumpInfo:
    '''
    用以存储跳转信息
    先前的实现机制是用一个list存起来，但是各个字段的意义不明确，现在直接用一个结构体存起来
    一个JumpInfo，记录着一个PUSH和一个跳转指令之间的关系
    这一套机制，搞得比较复杂，都是因为想做“试填入”。如果不想使用这个机制，大可直接改地址，改偏移量
    实际上确实可以这么干，因为测试了这么多真实的合约，没见过哪个会触发无法填入的情况
    只有之前本地构建的一个测试用例触发过
    但是毕竟论文里已经写了，就懒得删了......
    '''

    def __init__(self):
        # 常规的跳转信息，也就是一个PUSH一个跳转
        self.pushedData = 0  # PUSH的数值，即跳转地址
        self.byteNum = 0  # PUSH的字节数
        self.pushInstrAddr = 0  # PUSH指令所在的地址
        self.pushInstrBlock = 0  # PUSH指令所在的block
        self.jumpInstrBlock = 0  # JUMP/JUMPI指令所在的block

        # 额外的跳转信息，用于新构造的函数体、Codecopy转换而来的信息
        # Q：为什么要设置额外的跳转信息
        # A：举个例子，在构建新函数体之后，我们要将新函数体内部的跳转边记录下来，但是这些边的跳转地址可能
        #    并不能直接填入，因为字节数可能会更多。所以我们在构造函数体的时候，先使用了老函数体的跳转地址（后续再改），
        #    同时记录下新旧值之间的偏移量，等到真正做试填入的时候，我们用旧值加上偏移量，得到新值，然后再检查能不能真的填入。
        #    如果不能，就整体移动字节码。
        # 当然，我这个例子只涉及了一种情况。实际上，有六种情况，我们会针对每一种情况单独做一个处理，同时会有一个type类型用来记录类型信息。
        self.offset = 0  # 偏移量
        self.immediatelyFill = False  # 是否可以直接填入原位置
